Quiz updating
=============

[#functional]_

Updater
+++++++

The updater talks to the quiz system via a HTTP post. Start up a test http
server which logs posts:

>>> import zeit.content.quiz.tests
>>> zeit.content.quiz.tests.start_quiz_updater_httpd()

Get a quiz and update it:

>>> quiz = zeit.content.quiz.quiz.Quiz()
>>> quiz.uniqueId = 'http://xml.zeit.de/quiz-id'
>>> updater = zeit.content.quiz.interfaces.IQuizUpdater(quiz)
>>> zope.interface.verify.verifyObject(
...     zeit.content.quiz.interfaces.IQuizUpdater, updater)
True
>>> print updater.get_url()
http://localhost:.../quizupdate
>>> updater.update()


We have a post now:

>>> posts = zeit.content.quiz.tests.QuizUpdaterRequestHandler.posts_received
>>> len(posts)
1
>>> posts[0]['path']
'/quizupdate'
>>> import pprint
>>> import cgi
>>> pprint.pprint(cgi.parse_qs(posts[0]['data']))
{'action': ['preview'],
 'quiz_id': ['/quiz-id'],
 'xml': ['<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<quiz xmlns:py="http://codespeak.net/lxml/objectify/pytype">\n</quiz>\n']}


When the HTTP-Server is not up the error will be thrown, so the user knows that
something isn't working:

>>> updater.update()  #doctest: +IGNORE_EXCEPTION_DETAIL
Traceback (most recent call last):
    ...
URLError: <urlopen error (61, 'Connection refused')>


The same happens when an error code is returned from the server:

>>> zeit.content.quiz.tests.QuizUpdaterRequestHandler.response = 500
>>> zeit.content.quiz.tests.start_quiz_updater_httpd()
>>> updater.update()
Traceback (most recent call last):
    ....
HTTPError: HTTP Error 500: Internal Server Error

>>> zeit.content.quiz.tests.QuizUpdaterRequestHandler.response = 200

Events
++++++

The quiz is updated on checkin:

>>> posts[:] = []
>>> zeit.content.quiz.tests.start_quiz_updater_httpd()
>>> import zeit.cms.checkout.interfaces
>>> zope.event.notify(
...     zeit.cms.checkout.interfaces.AfterCheckinEvent(quiz, None, None))
>>> len(posts)
1
>>> pprint.pprint(cgi.parse_qs(posts[0]['data']))
{'action': ['preview'],
 'quiz_id': ['/quiz-id'],
 'xml': ['<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<quiz xmlns:py="http://codespeak.net/lxml/objectify/pytype">\n</quiz>\n']}

When we add a quiz to the repository it'll also be updated:

>>> posts[:] = []
>>> zeit.content.quiz.tests.start_quiz_updater_httpd()
>>> quiz.uniqueId = None
>>> import zope.component
>>> import zeit.cms.repository.interfaces
>>> repository = zope.component.getUtility(
...     zeit.cms.repository.interfaces.IRepository)
>>> repository['quiz'] = quiz
>>> len(posts)
1
>>> pprint.pprint(cgi.parse_qs(posts[0]['data']))
{'action': ['preview'],
 'quiz_id': ['/quiz'],
 'xml': ['<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<quiz xmlns:py="http://codespeak.net/lxml/objectify/pytype">...</quiz>\n']}


>>> zope.app.component.hooks.setSite(old_site)

.. [#functional]

    >>> import zope.app.component.hooks
    >>> old_site = zope.app.component.hooks.getSite()
    >>> zope.app.component.hooks.setSite(getRootFolder())
